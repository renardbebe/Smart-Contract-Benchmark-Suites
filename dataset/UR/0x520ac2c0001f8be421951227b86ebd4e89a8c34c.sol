 

pragma solidity ^0.5.7;
contract MarginParent {
  bytes constant _margin_swap_compiled = hex"";
  address _manager_address;
  address _manager_proposed;
  address _comptroller_address;
  address _cEther_address;
  uint256[2**160] _white_listed_addresses;
  address public _last_create_address;
  
  constructor(address comptroller_address, address cEther_address) public payable  {
    assembly {
      sstore(_comptroller_address_slot, comptroller_address)
      sstore(_cEther_address_slot, cEther_address)
      sstore(_manager_address_slot, caller)
      sstore(add(_white_listed_addresses_slot, caller), 1)
    }
  }
  
  function () external payable  {}
  
  function managerPropose(address new_manager) external  {
    assembly {
      if xor(caller, sload(_manager_address_slot)) {
        mstore(32, 1)
        revert(63, 1)
      }
      sstore(_manager_proposed_slot, new_manager)
    }
  }
  
  function managerSet() external  {
    assembly {
      let proposed := sload(_manager_proposed_slot)
      if xor(caller, proposed) {
        mstore(32, 1)
        revert(63, 1)
      }
      sstore(add(_white_listed_addresses_slot, sload(_manager_address_slot)), 0)
      sstore(add(_white_listed_addresses_slot, proposed), 1)
      sstore(_manager_address_slot, proposed)
    }
  }
  
  function setupMargin() external 
  returns (address margin_contract) {
    bytes memory margin_swap_compiled = _margin_swap_compiled;
    assembly {
      let compiled_bytes := mload(margin_swap_compiled)
      let contract_start := add(margin_swap_compiled, 0x20)
      let cursor := add(contract_start, compiled_bytes)
      mstore(cursor, caller)
      cursor := add(cursor, 0x20)
      mstore(cursor, address)
      cursor := add(cursor, 0x20)
      mstore(cursor, sload(_comptroller_address_slot))
      cursor := add(cursor, 0x20)
      mstore(cursor, sload(_cEther_address_slot))
      cursor := add(cursor, 0x20)
      mstore(0x40, cursor)
      let contract_size := sub(cursor, contract_start)
      margin_contract := create2(0, contract_start, contract_size, caller)
      if iszero(margin_contract) {
        mstore(32, 1)
        revert(63, 1)
      }
      sstore(_last_create_address_slot, margin_contract)
      sstore(add(_white_listed_addresses_slot, margin_contract), 1)
    }
  }
  
  function isMarginSetup(address owner) public view 
  returns (address margin_contract, bool enabled) {
    margin_contract = getMarginAddress(owner);
    assembly {
      enabled := sload(add(_white_listed_addresses_slot, margin_contract))
    }
  }
  
  function getMarginAddress(address owner) public view 
  returns (address margin_contract) {
    bytes memory margin_swap_compiled = _margin_swap_compiled;
    assembly {
      let compiled_bytes := mload(margin_swap_compiled)
      let contract_start := add(margin_swap_compiled, 0x20)
      let cursor := add(contract_start, compiled_bytes)
      mstore(cursor, owner)
      cursor := add(cursor, 0x20)
      mstore(cursor, address)
      cursor := add(cursor, 0x20)
      mstore(cursor, sload(_comptroller_address_slot))
      cursor := add(cursor, 0x20)
      mstore(cursor, sload(_cEther_address_slot))
      cursor := add(cursor, 0x20)
      mstore(0x40, cursor)
      let contract_size := sub(cursor, contract_start)
      let contract_hash := keccak256(contract_start, contract_size)
      mstore(margin_swap_compiled, or(shl(0xa0, 0xff), address))
      mstore(add(margin_swap_compiled, 0x20), owner)
      mstore(add(margin_swap_compiled, 0x40), contract_hash)
      let address_hash := keccak256(add(margin_swap_compiled, 11), 85)
      margin_contract := and(address_hash, 0xffffffffffffffffffffffffffffffffffffffff)
    }
  }
  
  function getCapital(address asset, uint256 amount) external  {
    
    uint256[3] memory m_in;
    
    uint256[1] memory m_out;
    assembly {
      if iszero(sload(add(_white_listed_addresses_slot, caller))) {
        mstore(32, 1)
        revert(63, 1)
      }
      let m_in_size := 0
      let wei_to_send := amount
      let dest := caller
      if asset {
        mstore(m_in,   0xa9059cbb00000000000000000000000000000000000000000000000000000000)
        mstore(add(m_in, 4), caller)
        mstore(add(m_in, 0x24), amount)
        dest := asset
        m_in_size := 0x44
        wei_to_send := 0
      }
      let result := call(gas, dest, wei_to_send, m_in, m_in_size, m_out, 32)
      if iszero(result) {
        mstore(32, 2)
        revert(63, 1)
      }
      if asset {
        if iszero(mload(m_out)) {
          mstore(32, 3)
          revert(63, 1)
        }
      }
    }
  }
}